I'm continuing the development of my Top Chef Fantasy app, a web application built with Firebase for authentication and database (Firestore), React 19, TypeScript (using .tsx exclusively for TypeScript files with JSX), TailwindCSS, and React Router v7. My development environment includes VSCode and PowerShell. So far, I've migrated server-side components (auth middleware, league controller, server initialization, challenge controller, message functionality) and client-side components (chef management, user profile management) to Firebase/Firestore. The next focus is enhancing the authentication system: I have an authService.tsx file implementing core Firebase auth, and now I need to add password reset and email verification capabilities.

Your task is to assist me in completing this phase and beyond, ensuring a fully functional Firebase-based application with modern React 19 features, robust error handling, and optimized performance. Below is a strict ruleset you must follow to deliver code and guidance. These rules ensure compatibility, consistency, and quality across the project. Additionally, I've included mechanisms to keep you aligned with these rules and avoid sidetracking.

Strict Ruleset You Must Follow
1. Project Scope & Technology Stack
Use Firebase Authentication for all auth operations (login, registration, password reset, email verification).
Use Firestore for all database operations (CRUD).
Build with React 19, TypeScript (.tsx files only), TailwindCSS, and React Router v7.
Develop for my environment: VSCode (with TailwindCSS IntelliSense) and PowerShell (provide PowerShell-compatible commands).
2. Complete Firebase Transition
Authentication:
Remove all JWT-related code (token generation, verification, storage like localStorage/cookies).
Use admin.auth().verifyIdToken() for server-side token verification in Express routes.
Database:
Remove all MongoDB-related code (connections, schemas, models, queries, MONGO_URI).
Dependencies:
Update package.json to remove MongoDB/JWT libraries and ensure firebase and firebase-admin are included.
Run npm install firebase firebase-admin in PowerShell if needed.
3. Authentication Enhancements
Add password reset and email verification to authService.tsx using Firebase Auth APIs.
Use Express fallback endpoints (/api/auth/*) only for custom logic (e.g., email customization).
Wrap all auth operations in try/catch blocks with user-friendly error messages (e.g., "Email not found").
4. React 19 Best Practices
Use direct ref props instead of forwardRef when possible.
Implement useActionState for form handling (no manual state management).
Use useOptimistic for immediate UI feedback (e.g., chat messages).
Manage document metadata (<title>, <meta>) directly in components.
Implement resource preloading (e.g., prefetchDNS, preload) for performance.
5. TypeScript Usage
Use .tsx for all TypeScript files containing JSX or React components.
Define strict interfaces/types for props, state, API responses, and context values.
Avoid any or loose types; ensure type safety.
6. Component Structure
Destructure props with default values (e.g., { prop = defaultValue }) to prevent undefined errors.
Use standard function declarations (not React.FC).
Organize files: hooks at the top, helper functions next, then JSX.
7. Context & Providers
Provide typed default values with createContext().
Memoize provider values with useMemo to prevent unnecessary re-renders.
8. React Hooks
Initialize useState with proper types (e.g., useState<string>('')).
Add cleanup functions in useEffect for subscriptions (e.g., Firestore listeners).
Ensure complete dependency arrays in hooks.
Use useCallback for event handlers and useMemo for expensive computations.
9. HTML & Accessibility
Use strict HTML attribute types (e.g., type="button" for buttons).
Add aria-labels to interactive elements and explicit width/height to images.
10. Styling & UI
Use TailwindCSS exclusively (no inline styles).
Implement dark mode with dark: classes.
Add animation transitions for route changes using React Router.
11. Data & API Handling
Use optional chaining (?.) for nested properties.
Wrap API calls in try/catch with loading states and client-side validation.
Use nullish coalescing (??) for defaults instead of ||.
12. Routing
Use React Router v7 for all navigation.
Define routes with <Routes> and <Route>.
Use dynamic routes (e.g., /leagues/:leagueId) with useParams.
Implement nested routes and protected routes based on auth status.
Use <Link> for navigation and useNavigate for programmatic redirects.
13. Performance & Best Practices
Ensure compatibility with React Strict Mode (handle double-rendering).
Use <Suspense> for loading states and error boundaries for error handling.
Add data-testid attributes for testing.
Avoid direct DOM manipulation; use refs instead.
14. Firebase-Specific Enhancements
Optimize Firestore queries with indexes (e.g., for chat/league data).
Use virtualized lists (e.g., react-window) for long chat histories.
Synchronize auth state with React using onAuthStateChanged.
15. Code Delivery Guidelines
Review Entire Codebase: Check dependencies and existing code before suggesting changes.
Provide Complete Files: Deliver full .tsx file replacements, not partial snippets.
Follow Firebase Patterns: Use Firebase best practices with Express fallbacks only when necessary.
Ensure React 19 Compatibility: Leverage useActionState, useOptimistic, etc.
Include Git Commit Messages: Suggest messages like git commit -m "Add password reset and email verification to authService.tsx".
Request Precise Error Context: Ask for exact error messages, line numbers, and component chains if issues arise.
Implement Full Error Handling: Include logging (e.g., console.error) and user feedback.
Clean Up Event Listeners: Ensure all subscriptions (e.g., Firestore) are unsubscribed in useEffect cleanup.
Optimize Dependency Arrays: Verify all hook dependency arrays are complete and minimal.
Memoize Functions/Values: Use useCallback/useMemo for performance-critical code.
Minimize Dependencies: Avoid adding libraries beyond Firebase, React, TailwindCSS, and React Router.
Enforce JSDoc: Add typed JSDoc comments (e.g., @param {string} email - User email).
Follow Formatting: Use 2-space indentation, single quotes, and consistent syntax.
Suggest Tests: Provide test case ideas (e.g., "Test password reset email sending").
16. Development Process
Focus Sequentially: Start with authentication enhancements, then league management, challenge integration, and roster functionality.
Review Existing Files: Check my authService.tsx and other Firebase implementations first, then suggest only missing components.
Mechanisms to Stay on Track
Self-Check Before Submission: Cross-reference every response against this ruleset to ensure compliance.
Ask for Validation: After each solution, ask: "Does this meet the ruleset and your expectations?"
Handle One Task at a Time: Focus solely on the requested feature (e.g., auth enhancements) until complete.
Request Clarification: If your request is vague, ask for specific files, features, or errors to address.
How to Use This Prompt
Initiate Tasks: Start with "Enhance authService.tsx with password reset and email verification."
Provide Context: Share relevant code (e.g., current authService.tsx), errors, or requirements.
Request Checks: Say "Verify this follows the ruleset" if unsure.
Expect PowerShell Commands: I’ll provide commands like npm install firebase in PowerShell syntax.
Example Response Expectation
For enhancing authService.tsx, I’ll:

Review your existing authService.tsx.
Deliver a complete authService.tsx with password reset and email verification.
Include JSDoc, error handling, and React 19 compatibility.
Suggest a commit message like git commit -m "Enhance authService.tsx with password reset and email verification".
Ask for feedback to ensure compliance.